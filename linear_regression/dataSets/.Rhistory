BMI_fill
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(binwidth = 1) +
BMI_fill +
facet_grid(RBMI ~ .)
ggplot(adult, aes(x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..density..), binwidth = 1) +
BMI_fill +
facet_grid(RBMI ~ .)
# Plot 5 - Density histogram with position = "fill"
ggplot(adult, aes(x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..density..), binwidth = 1, position = "fill") +
BMI_fill
# Plot 6 - The accurate histogram
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill
df = read_spss(choose_files())
df = read_spss(choose_file())
ggplot(adult, aes (x = SRAGE_P, fill= factor(RBMI))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
BMI_fill +
facet_grid(RBMI ~ .)
DF <- table(adult$RBMI, adult$SRAGE_P)
head(DF)
summary(DF)
DF_freq <- apply(DF, 2, function(x) x/sum(x))
library(reshape2)
DF_melted <- melt(DF_freq)
names(DF_melted) <- c("FILL", "X", "value")
ggplot(DF_melted, aes(x = X, y = value, fill = FILL)) +
geom_bar(stat = "identity", position = "stack") +
BMI_fill +
facet_grid(FILL ~ .)
View(DF_melted)
# The initial contingency table
DF <- as.data.frame.matrix(table(adult$SRAGE_P, adult$RBMI))
# Add the columns groupsSum, xmax and xmin. Remove groupSum again.
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
# The groupSum column needs to be removed, don't remove this line
DF$groupSum <- NULL
# Copy row names to variable X
DF$X <- row.names(DF)
# Melt the dataset
library(reshape2)
DF_melted <- melt(DF, id.vars = c("X", "xmin", "xmax"), variable.name = "FILL")
# dplyr call to calculate ymin and ymax - don't change
library(dplyr)
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Plot rectangles - don't change.
library(ggthemes)
ggplot(DF_melted, aes(ymin = ymin,
ymax = ymax,
xmin = xmin,
xmax = xmax,
fill = FILL)) +
geom_rect(colour = "white") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
BMI_fill +
theme_tufte()
# Plot rectangles - don't change.
library(ggthemes2)
ggplot(DF_melted, aes(ymin = ymin,
ymax = ymax,
xmin = xmin,
xmax = xmax,
fill = FILL)) +
geom_rect(colour = "white") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
BMI_fill +
theme_tufte()
install.packages("ggthemes")
library(ggthemes)
ggplot(DF_melted, aes(ymin = ymin,
ymax = ymax,
xmin = xmin,
xmax = xmax,
fill = FILL)) +
geom_rect(colour = "white") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
BMI_fill +
theme_tufte()
# Perform chi.sq test (RBMI and SRAGE_P)
results <- chisq.test(table(adult$RBMI, adult$SRAGE_P))
# Melt results$residuals and store as resid
resid = melt(results$residuals)
# Change names of resid
names(resid) = c("FILL", "X", "residual")
# merge the two datasets:
DF_all = merge(DF_melted, resid)
library(ggthemes)
ggplot(DF_all, aes(ymin = ymin,
ymax = ymax,
xmin = xmin,
xmax = xmax,
fill = residual)) +
geom_rect() +
scale_fill_gradient2() +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_tufte()
# Position for labels on x axis
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
# Position for labels on y axis (don't change)
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# Plot
ggplot(DF_all, aes(ymin = ymin, ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
# geom_text for ages (i.e. the x axis)
geom_text(aes(x = xtext,
label = X),
y = 1,
size = 3,
angle = 90,
hjust = 1,
show.legend = FALSE) +
# geom_text for BMI (i.e. the fill axis)
geom_text(aes(x = max(xmax),
y = ytext,
label = FILL),
size = 3,
hjust = 1,
show.legend = FALSE) +
scale_fill_gradient2() +
theme_tufte() +
theme(legend.position = "bottom")
# Load all packages
library(ggplot2)
library(reshape2)
library(dplyr)
library(ggthemes)
# Script generalized into a function
mosaicGG <- function(data, X, FILL) {
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xtext <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$ytext <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# plot:
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xtext, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = ytext, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
# BMI described by age
mosaicGG(adult, X = "SRAGE_P", FILL = "RBMI")
# Poverty described by age
mosaicGG(adult, X = "SRAGE_P", FILL = "POVLL")
library(readr)
WA_Fn_UseC_Telco_Customer_Churn <- read_csv("~/Capstone/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(WA_Fn_UseC_Telco_Customer_Churn)
WA_Fn_UseC_Telco_Customer_Churn = df
library(readr)
df <- read_csv("~/Capstone/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(WA_Fn_UseC_Telco_Customer_Churn)
summary(df)
View(df)
head(df)
str(df)
## SlideRule Foundations of Data  Science
### Baseball Analytics and Regression
## Read the data set into R
raw.bb <- read.csv(file.choose()) # prompts you to choose the file to be loaded
attach(raw.bb)
library(tree)
tree.wins <- tree(TARGET_WINS~.-INDEX, raw.bb) # run a model of wins vs all variables
summary(tree.wins) # gives the variables entered in the tree model
plot(tree.wins)
text(tree.wins,pretty=0)
remove(tree.wins)
library(ggplot2)
ggplot(df, aes(x = df$Churn)) +
geom_bar()
ggplot(df, aes(x = df$Churn, y = df$gender)) +
geom_bar()
summary(df)
View(df)
library(readr)
df <- read_csv("~/Capstone/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(df)
summary(df)
head(df)
str(df)
levels(df$MultipleLines)
df
df$gender = as.factor(df$gender)
levels(df$gender)
df$InternetService = as.factor(df$InternetService)
df$Contract = as.factor(df$Contract)
df$PaymentMethod = as.factor(df$PaymentMethod)
levels(df$InternetService)
levels(df$Contract)
levels(df$PaymentMethod)
library(ggplot2)
ggplot(df, aes(x = gender, fill = PaymentMethod)) +
geom(bar)
ggplot(df, aes(x = gender, fill = PaymentMethod)) +
geom(bar)
ggplot(df, aes(x = gender, fill = PaymentMethod)) +
geom_bar()
df$Churn = as.factor(df$Churn)
levels(df$Churn)
churn_v_Payment = table(df$Churn, df$PaymentMethod)
churn_v_Payment
View(churn_v_Payment)
remove(churn_v_Payment)
table(df$Churn)
table.prop(df$Churn, 1)
ggplot(df, aes(x = df$MonthlyCharges, y = df$tenure)) +
geom_dotplot() +
facet_wrap(~df$Churn)
ggplot(df, aes(x = df$MonthlyCharges, y = df$tenure)) +
geom_jitter() +
facet_wrap(~df$Churn)
ggplot(df, aes(x = df$MonthlyCharges, y = df$tenure)) +
geom_jitter(alpha = .2) +
facet_wrap(~df$Churn)
library(ggplot2)
library(dplyr)
library(tidyr)
df = transmute(df, Senior_Citizen = ifelse(df$Partner == "Yes", 1, 2))
library(readr)
df <- read_csv("~/Capstone/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(df)
library(ggplot2)
library(dplyr)
library(tidyr)
summary(df)
head(df)
str(df)
# Convert characters to factors
df$gender = as.factor(df$gender)
df$InternetService = as.factor(df$InternetService)
df$Contract = as.factor(df$Contract)
df$PaymentMethod = as.factor(df$PaymentMethod)
# Confirm levels for new factor variables
levels(df$gender)
levels(df$InternetService)
levels(df$Contract)
levels(df$PaymentMethod)
df$Partner = transmute(df, Partner = ifelse(df$Partner == "Yes", 1, 0))
library(readr)
df <- read_csv("~/Capstone/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(df)
library(ggplot2)
library(dplyr)
library(tidyr)
summary(df)
head(df)
str(df)
# Convert characters to factors
df$gender = as.factor(df$gender)
df$InternetService = as.factor(df$InternetService)
df$Contract = as.factor(df$Contract)
df$PaymentMethod = as.factor(df$PaymentMethod)
# Confirm levels for new factor variables
levels(df$gender)
levels(df$InternetService)
levels(df$Contract)
levels(df$PaymentMethod)
df$Partner = mutate(df, Partner = ifelse(df$Partner == "Yes", 1, 0))
library(readr)
df <- read_csv("~/Capstone/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(df)
library(ggplot2)
library(dplyr)
library(tidyr)
summary(df)
head(df)
str(df)
# Convert characters to factors
df$gender = as.factor(df$gender)
df$InternetService = as.factor(df$InternetService)
df$Contract = as.factor(df$Contract)
df$PaymentMethod = as.factor(df$PaymentMethod)
# Confirm levels for new factor variables
levels(df$gender)
levels(df$InternetService)
levels(df$Contract)
levels(df$PaymentMethod)
mutate(df, Partner = ifelse(df$Partner == "Yes", 1, 0))
df = df %>% mutate(Churn = ifelse(df$Churn == "Yes", 1, 0))
library(readr)
df <- read_csv("~/Capstone/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(df)
library(ggplot2)
library(dplyr)
library(tidyr)
summary(df)
head(df)
str(df)
# Convert characters to factors
df$gender = as.factor(df$gender)
df$InternetService = as.factor(df$InternetService)
df$Contract = as.factor(df$Contract)
df$PaymentMethod = as.factor(df$PaymentMethod)
# Confirm levels for new factor variables
levels(df$gender)
levels(df$InternetService)
levels(df$Contract)
levels(df$PaymentMethod)
df = df %>% mutate(Churn_val = ifelse(df$Churn == "Yes", 1, 0))
library(readr)
df <- read_csv("~/Capstone/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(df)
library(ggplot2)
library(dplyr)
library(tidyr)
summary(df)
head(df)
str(df)
# Convert characters to factors
df$gender = as.factor(df$gender)
df$InternetService = as.factor(df$InternetService)
df$Contract = as.factor(df$Contract)
df$PaymentMethod = as.factor(df$PaymentMethod)
# Confirm levels for new factor variables
levels(df$gender)
levels(df$InternetService)
levels(df$Contract)
levels(df$PaymentMethod)
df = df %>% mutate(Churn = ifelse(df$Churn == "Yes", 1, 0))
df = df %>% mutate(Partner = ifelse(df$Partner == "Yes", 1, 0))
df = df %>% mutate(Dependents = ifelse(df$Dependents == "Yes", 1, 0))
df = df %>% mutate(PhoneService = ifelse(df$PhoneService == "Yes", 1, 0))
df = df %>% mutate(PaperlessBilling = ifelse(df$PaperlessBilling == "Yes", 1 ,0))
df = df %>% mutate(Multiple_Lines_F =
if (df$MultipleLines == "Yes") {
1
} else if (df$MultipleLines == "No") {
2
} else
NA)
library(readr)
df <- read_csv("~/Capstone/WA_Fn-UseC_-Telco-Customer-Churn.csv")
View(df)
library(ggplot2)
library(dplyr)
library(tidyr)
summary(df)
head(df)
str(df)
# Convert characters to factors
df$gender = as.factor(df$gender)
df$InternetService = as.factor(df$InternetService)
df$Contract = as.factor(df$Contract)
df$PaymentMethod = as.factor(df$PaymentMethod)
# Confirm levels for new factor variables
levels(df$gender)
levels(df$InternetService)
levels(df$Contract)
levels(df$PaymentMethod)
# Change chr yes/no variables to 1/0
df = df %>% mutate(Churn = ifelse(df$Churn == "Yes", 1, 0))
df = df %>% mutate(Partner = ifelse(df$Partner == "Yes", 1, 0))
df = df %>% mutate(Dependents = ifelse(df$Dependents == "Yes", 1, 0))
df = df %>% mutate(PhoneService = ifelse(df$PhoneService == "Yes", 1, 0))
df = df %>% mutate(PaperlessBilling = ifelse(df$PaperlessBilling == "Yes", 1 ,0))
df = df %>% mutate(multiple_lines_t = ifelse(df$MultipleLines == "Yes", 1, ifelse(df$MultipleLines == "No", 2, "NA")))
View(df)
df = df %>% mutate(MultipleLines = ifelse(df$MultipleLines == "Yes", 1, 0))
df = df %>% mutate(online_security_t = ifelse(df$OnlineSecurity == "Yes", 1, ifelse(df$OnlineSecurity == "No", 2, "NA")))
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point()
# read the states data
states.data <- readRDS("states.rds")
#get labels
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
#look at last few labels
tail(states.info, 8)
library(ggplot2)
setwd("~/Linear Regression Practice 1/linear_regression/dataSets")
# read the states data
states.data <- readRDS("states.rds")
#get labels
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
#look at last few labels
tail(states.info, 8)
library(ggplot2)
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point()
mean_energy = mean(states.data$energy)
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point() +
geom_line(mean_energy)
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point() +
geom_line(ase(mean_energy))
mean_energy
mean_energy = mean(states.data$energy, na.rm = TRUE)
mean_energy
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point() +
stat_summary(aes(y = energy), fun.y = mean, geom="line")
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point()
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point() +
geom_hline(aes(yintercept = mean_energy))
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point()
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point() +
geom_hline(aes(yintercept = mean_energy))
energy_reg = lm(energy~ metro, data = states.data)
energy_reg
ggplot(states.data, aes(x = metro, y = energy)) +
geom_point() +
geom_hline(aes(yintercept = mean_energy)) +
geom_smooth(method = "lm", formula = y~x)
summary(energy_reg)
ggplot(states.data, aes(x = energy_reg$residuals)) +
geom_histogram()
ggplot(states.data, aes(energy_reg$residuals)) +
geom_histogram()
ggplot(energy_reg, aes(energy_reg$residuals)) +
geom_histogram()
ggplot(energy_reg, aes(energy_reg$residuals)) +
geom_histogram(bins = 10)
ggplot(energy_reg, aes(abs(energy_reg$residuals)) +
geom_histogram(bins = 10)
ggplot(energy_reg, aes(abs(energy_reg$residuals))) +
geom_boxplot()
ggplot(energy_reg, aes(abs(energy_reg$residuals))) +
geom_boxplot()
ggplot(energy_reg, aes(abs(x = energy_reg$residuals))) +
geom_histogram()
ggplot(energy_reg, aes(abs(x = energy_reg$fitted, y = energy_reg$residuals))) +
geom_histogram()
ggplot(energy_reg, aes(x = energy_reg$fitted, abs(y = energy_reg$residuals))) +
geom_histogram()
ggplot(energy_reg, aes(x = energy_reg$fitted, abs(y = energy_reg$residuals))) +
geom_point()
ggplot(energy_reg, aes(x = .fitted, .resid)) +
geom_point()
plot(energy_reg)
summary(energy_reg)
View(states.info)
ggplot(states.data, aes(x = metro, y = toxic)) +
ggplot(states.data, aes(x = metro, y = toxic)) + geom_point()
ggplot(states.data, aes(x = toxic, y = energy)) +
geom_point() +
geom_hline(aes(yintercept = mean_energy))
energy_reg2 = lm(energy~ metro + toxic, data = states.data)
summary(energy_reg3)
summary(energy_reg2)
energy_reg3 = lm(energy~ toxic, data = states.data)
summary(energy_reg3)
plot(energy_reg2)
coplot(energy~toxic|energy, panel=panel.smotth, states.data)
coplot(energy~toxic|energy, panel=panel.smooth, states.data)
coplot(energy~toxic|metro, panel=panel.smotth, states.data)
coplot(energy~toxic|metro, panel=panel.smooth, states.data)
sat.expense.by.percent <- lm(csat ~ expense*income,
data=states.data)
coef(summary(sat.expense.by.percent))
str(states.data$region)
states.data$region <- factor(states.data$region)
sat.region <- lm(csat ~ region,
data=states.data)
coef(summary(sat.region))
anova(sat.region) # show ANOVA table
contrasts(states.data$region)
coef(summary(lm(csat ~ C(region, base=4),
data=states.data)))
coef(summary(lm(csat ~ C(region, contr.helmert),
data=states.data)))
energy_reg2 = lm(energy~ metro + toxic*density, data = states.data)
energy_regInt = lm(energy~ metro + toxic*density, data = states.data)
summary(energy_regInt)
energy_reg2 = lm(energy~ metro + toxic, data = states.data)
summary(energy_reg2)
energy.region = lm(energy~ region, data = states.data)
summary(energy.region)
ggplot(states.data, aes(x = region, y = energy)) +
geom_jitter(alpha = .3)
